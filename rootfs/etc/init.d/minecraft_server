#!/bin/sh
### BEGIN INIT INFO
# Provides:       minecraft_server
# Required-Start: $remote_fs $syslog
# Required-Stop:  $remote_fs $syslog
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# chkconfig:      345 50 50
# Description:    Minecraft Server Control Script
### END INIT INFO
#
# startscript for minecraft server
#
# (c) 2015-2016 nimmis <kjell.havneskold@gmail.com>
#

JAVACMD=$(which java)

USAGE=$(cat <<EOF
Usage:  $0 <option>

Options:

  start
    Start the Minecraft server.

  stop
    Stop the Minecraft server.

  restart
    Restart the Minecraft server.

  status
    Give the status of the server

  send "<command>"
    Sends a command to the Minecraft server

  log
    show output log from the Minecraft server
EOF
)

#
# get the PID for minecraft server pocess
#
getPID() {
  local PID
  PID=$( ps -f -u $MC_USER | grep "$MC_PROC" | grep -v "sh -c" |  grep -v grep | awk '{print $2}' )
  printf "%d\n" $PID
}

#
# return 1 if the minecraft server is running othervise 0
#
isRunning() {
  if [  $(getPID) -eq 0 ] ; then
	echo 0
  else
	echo 1
  fi
}

# execute command as minecraft user
execCMD() {
	# if running as root, switch to defined user

	if [ $(id -u) -eq 0 ]; then
		su -s /bin/sh -c "$1" $MC_USER $2
	else
		sh -c "$1" $2
	fi
}

#
# send a command to the running minecraft server
sendCMD() {
  echo $1 >> $MC_DIR/input.con
}

#
# check that all is ok the start server
#
checkOK() {

  # check that the directory exists
  if [ ! -d $MC_DIR ] ; then
	echo "$MC_DIR does not exist" ;
	exit 1
  fi

  # and there are a jar file in it
  if [ ! -f $MC_DIR/$MC_PROC ] ; then
	echo "the minecraftfile $MC_DIR/$MC_PROC does not exist."
	exit 1
  fi 

  # check to see that minecraft user can write in the
  execCMD "touch $MC_DIR/testfile 2> /dev/null"
  if [ ! -f $MC_DIR/testfile ] ; then
	echo "the user $MC_USER has not write access to directory $MC_DIR"
	exit 1
  else
    rm $MC_DIR/testfile
  fi

}
	
#
# prepare console files
#
ResetConsoleFiles() {

	rm -f $MC_DIR/input.con
	rm -f $MC_DIR/output.con
	
	if [ -f $MC_DIR/input.con ]; then
		echo "$MC_DIR/input.con could not be removed"
		exit 1
	fi

       	if [ -f $MC_DIR/output.con ]; then
                echo "$MC_DIR/output.con could not be removed"
                exit 1
        fi

	execCMD "touch $MC_DIR/input.con"
	execCMD "touch $MC_DIR/output.con"

	if [ ! -f $MC_DIR/input.con ]; then
		echo "$MC_DIR/input.con could not be created by $MC_USER"
		exit 1
	fi

        if [ ! -f $MC_DIR/output.con ]; then
                echo "$MC_DIR/output.con could not be created by $MC_USER"
                exit 1
        fi

}


#
# start the minecraft server
#
start() {
   echo -n "Starting minecraft server as user $MC_USER..."

   checkOK 

   ResetConsoleFiles


   # be in right working directory when starting 
   cd $MC_DIR

   execCMD "tail -f --pid=\$$ $MC_DIR/input.con | { $JAVACMD $MC_JAVA_OPS -jar $MC_DIR/$MC_PROC nogui > $MC_DIR/output.con 2>&1 ; kill \$$ ; } " &

   # check if the command wait OK
   if [ $? -ne 0 ]; then
     echo "Could not start $MC_DIR/$MC_PROC.\n"
     exit 1
   fi

   # wait 2 seconds to see if the process survived
   sleep 2

   if [ $(isRunning) -eq 1 ] ; then
     echo "Started"
   else
     echo "stopped again"
     exit 1
   fi

}

stop() {
  local i

  echo -n "Stopping minecraft server..."

  sendCMD "stop"

  # wait for 100 seconds until killing it
  i=0

  while [ $i -lt 100  -a $(isRunning) -eq 1 ]
  do
    echo -n "."
    sleep 1
    i=`expr $i + 1`
  done

  if [ $(isRunning) -eq 1 ] ; then
     echo -n  "(need to kill it)..."
     kill  $(getPID)
     # give it time to die
     sleep 2
  fi

  if [ $(isRunning) -eq 1 ] ; then
     echo "Could not stop it"
     exit 1
  else
     echo "Stopped" 
  fi

}

case "$1" in

  start)
    if [ $(isRunning) -eq 1 ] ; then

	echo -n "$MC_PROC is already running with PID "
        getPID
	exit 1

    fi
    start
  ;;

  stop)
    if [ $(isRunning) -eq 1 ] ; then
       stop
    else
      echo "$MC_PROC is not running" 
    fi
  ;;

  restart)
     stop
     start
  ;;

  status)
    if [ $(isRunning) -eq 1 ] ; then
        echo -n "$MC_PROC is running with PID "
        getPID
    else
	echo "$MC_PROC is not running"
    fi
  ;;

  send)
     sendCMD "$2"
  ;;

  log)
     echo "Abort with CTRL-C"
     tail -f $MC_DIR/output.con
  ;;

  *)
    printf "$USAGE\n"
    exit 1
  ;;

esac

exit 0
